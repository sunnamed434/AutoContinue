name: 'AutoContinue Project Build'
description: 'Build AutoContinue browser extension for all platforms'
inputs:
  version:
    description: 'Version to build'
    required: true
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
  create-archives:
    description: 'Whether to create zip archives (true) or just build folders (false)'
    required: false
    default: 'true'
outputs:
  chrome-zip:
    description: 'Path to Chrome extension zip (if create-archives=true) or folder (if create-archives=false)'
    value: ${{ steps.build.outputs.chrome-zip }}
  firefox-zip:
    description: 'Path to Firefox extension zip (if create-archives=true) or folder (if create-archives=false)'
    value: ${{ steps.build.outputs.firefox-zip }}
  safari-zip:
    description: 'Path to Safari extension zip (if create-archives=true) or folder (if create-archives=false)'
    value: ${{ steps.build.outputs.safari-zip }}
  generated-version:
    description: 'Generated version string'
    value: ${{ steps.version.outputs.version }}
  is-prerelease:
    description: 'Whether this is a prerelease'
    value: ${{ steps.prerelease.outputs.is_prerelease }}

runs:
  using: 'composite'
  steps:
    - name: Create version
      id: version
      shell: bash
      run: echo "version=$(git describe --tags `git rev-list --tags --max-count=1`)+$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Check Prerelease
      id: prerelease
      shell: bash
      run: "if ${{ contains(steps.version.outputs.version, '-') }}; then
              echo is_prerelease=true >> $GITHUB_OUTPUT;
            else
              echo is_prerelease=false >> $GITHUB_OUTPUT;
            fi"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      shell: bash
      run: npm ci
        
    - name: Update version
      shell: bash
      run: node scripts/version.js
      env:
        VERSION: ${{ inputs.version }}
        
    - name: Run linter
      shell: bash
      run: npm run lint
        
    - name: Validate locales
      shell: bash
      run: npm run validate:locales
        
    - name: Run tests
      shell: bash
      run: npm run test:ci

    - name: Build all platforms
      id: build
      shell: bash
      run: |
        # Build Chrome
        npm run build:chrome
        mv dist dist-chrome
        
        # Build Firefox
        npm run build:firefox
        mv dist dist-firefox
        
        # Build Safari
        npm run build:safari
        mv dist dist-safari
        
        # Create archives if requested
        if [ "${{ inputs.create-archives }}" = "true" ]; then
          mkdir -p release
          
          # Package Chrome extension
          cd dist-chrome
          zip -r ../release/AutoContinue-Chrome-${{ inputs.version }}.zip .
          cd ..
          
          # Package Firefox extension
          cd dist-firefox
          zip -r ../release/AutoContinue-Firefox-${{ inputs.version }}.zip .
          cd ..
          
          # Package Safari extension
          cd dist-safari
          zip -r ../release/AutoContinue-Safari-${{ inputs.version }}.zip .
          cd ..
          
          # Set outputs for archives
          echo "chrome-zip=release/AutoContinue-Chrome-${{ inputs.version }}.zip" >> $GITHUB_OUTPUT
          echo "firefox-zip=release/AutoContinue-Firefox-${{ inputs.version }}.zip" >> $GITHUB_OUTPUT
          echo "safari-zip=release/AutoContinue-Safari-${{ inputs.version }}.zip" >> $GITHUB_OUTPUT
        else
          # Set outputs for folders
          echo "chrome-zip=dist-chrome" >> $GITHUB_OUTPUT
          echo "firefox-zip=dist-firefox" >> $GITHUB_OUTPUT
          echo "safari-zip=dist-safari" >> $GITHUB_OUTPUT
        fi
